# -*- coding: utf-8 -*-
"""Calvo_PrelimExam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qdmxu6mrAQLWKQ3pMpBmoMU66bKTFHfh
"""

import os
import time
import cv2
import numpy as np
import matplotlib.pyplot as plt
from multiprocessing import Pool


# Function to apply Gaussian Blur to a part of the image
def apply_gaussian(part):
    return cv2.GaussianBlur(part, (5, 5), 0)

# Directory path
image_directory = '/content/drive/MyDrive/100training'

# List of all images (assuming all are either 'cat.*' or 'dog.*')
image_files = [os.path.join(image_directory, f) for f in os.listdir(image_directory) if f.startswith(('cat', 'dog'))]

serial_times = []  # Initialize serial times list
parallel_times = []  # Initialize parallel times list

# Process each image
for image_file in image_files:

    # Load the image
    image = cv2.imread(image_file, 0)

    if image is None:
        print(f"Error loading image: {image_file}")
        continue

    h, w = image.shape

    # Display the original image
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title(f"Original Image: {os.path.basename(image_file)}")
    plt.axis('off')

    # Serial Gaussian Blur
    start_time = time.time()
    gaussian_serial = cv2.GaussianBlur(image, (5, 5), 0)
    elapsed_time = (time.time() - start_time) * 1000
    print(f'Serial Gaussian Blur Processing Time for {os.path.basename(image_file)}: {elapsed_time:.2f} milliseconds')

    serial_times.append(elapsed_time)  # Append serial time to the list

    # Display the serially processed image
    plt.subplot(1, 2, 2)
    plt.imshow(gaussian_serial, cmap='gray')
    plt.title(f"Processed Image (Serial): {os.path.basename(image_file)}")
    plt.axis('off')
    plt.show()

    # Parallel Gaussian Blur
    num_workers = 4
    split_image = np.array_split(image, num_workers)

    start_time = time.time()
    with Pool(num_workers) as pool:
        result = pool.map(apply_gaussian, split_image)

    gaussian_parallel = np.vstack(result)
    elapsed_time = (time.time() - start_time) * 1000
    print(f'Parallel Gaussian Blur Processing Time for {os.path.basename(image_file)}: {elapsed_time:.2f} milliseconds')

    parallel_times.append(elapsed_time)  # Append parallel time to the list
    # Display the parallelly processed image
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(image, cmap='gray')
    plt.title(f"Original Image: {os.path.basename(image_file)}")
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(gaussian_parallel, cmap='gray')
    plt.title(f"Processed Image (Parallel): {os.path.basename(image_file)}")
    plt.axis('off')
    plt.show()

# Plotting the comparison between serial and parallel processing times
plt.figure(figsize=(10, 6))

# Plot serial processing times
plt.plot(serial_times, label='Serial Processing', marker='o', color='blue')

# Plot parallel processing times
plt.plot(parallel_times, label='Parallel Processing', marker='o', color='green')

# Add title and labels
plt.title('Performance Comparison: Serial vs Parallel Gaussian Blur')
plt.xlabel('Image Index')
plt.ylabel('Processing Time (milliseconds)')

# Add legend and grid
plt.legend()
plt.grid(True)

# Show the plot
plt.show()

import pandas as pd

# Serial processing times for dogs and cats (replace these with actual timings)
serial_times = [
    # Dog images (dog.0.jpg to dog.49.jpg)
    25.61, 0.32, 0.91, 4.99, 2.40, 5.04, 1.10, 0.27, 1.14, 1.20,
    0.14, 0.24, 0.36, 0.27, 1.19, 1.13, 1.15, 0.91, 0.31, 2.11,
    4.74, 3.88, 2.79, 1.18, 0.26, 0.27, 3.42, 0.22, 0.39, 0.34,
    2.72, 2.63, 1.06, 0.27, 1.17, 0.91, 0.29, 1.03, 0.87, 0.32,
    1.05, 1.33, 0.25, 1.18, 0.26, 1.11, 0.27, 1.19, 0.14, 0.29,
    # Cat images (cat.0.jpg to cat.49.jpg)
    0.27, 0.19, 0.33, 1.19, 0.16, 3.15, 3.76, 0.25, 1.03, 0.29,
    0.27, 1.01, 1.12, 1.06, 1.20, 1.08, 2.09, 0.26, 3.87, 1.16,
    1.01, 0.19, 3.52, 6.47, 0.26, 1.13, 1.11, 1.17, 1.18, 1.19,
    1.07, 1.12, 0.29, 0.78, 0.30, 2.37, 1.12, 1.11, 0.31, 2.04,
]

# Parallel processing times for dogs and cats (replace these with actual timings)
parallel_times = [
    # Dog images (dog.0.jpg to dog.49.jpg)
    119.87, 112.24, 107.65, 106.52, 118.90, 128.88, 139.14, 111.22, 119.42, 113.24,
    101.40, 101.93, 140.41, 98.43, 97.52, 100.69, 127.16, 120.68, 147.66, 141.51,
    157.64, 134.05, 144.58, 127.88, 121.67, 101.02, 95.74, 96.28, 104.02, 109.78,
    97.76, 105.65, 102.25, 95.15, 152.70, 139.18, 101.89, 142.09, 99.58, 111.26,
    # Cat images (cat.0.jpg to cat.49.jpg)
    98.61, 116.31, 106.00, 134.43, 113.46, 120.42, 125.14, 114.23, 106.01, 108.69,
    108.58, 104.99, 91.77, 94.51, 107.78, 110.23, 127.40, 119.99, 136.38, 120.49,
    129.08, 123.79, 136.86, 133.92, 161.20, 120.29, 120.32, 102.96, 98.90, 122.62,
    99.54, 118.08, 121.59, 133.89, 138.95, 149.11, 130.40, 134.82, 141.35, 94.32,
    103.52, 118.45, 118.58, 131.77, 107.57, 100.11, 125.86, 129.00, 131.14, 87.45,
    107.64,
]

# Prepare results for the specified number of images
image_counts = [10, 25, 50, 75, 100]
results = []

for count in image_counts:
    # Get the times for the current count of images
    serial_subset = serial_times[:count]
    parallel_subset = parallel_times[:count]

    # Calculate total times
    total_serial_time = sum(serial_subset)
    total_parallel_time = sum(parallel_subset)

    # Calculate speedup
    speedup = total_serial_time / total_parallel_time if total_parallel_time > 0 else float('inf')

    # Append results
    results.append({
        'Number of Images': count,
        'Time Elapsed ms (Serial)': total_serial_time,
        'Time Elapsed ms (Parallel)': total_parallel_time,
        'Speedup (Serial/Parallel)': speedup
    })

# Create a DataFrame
performance_df = pd.DataFrame(results)

# Display the table
print(performance_df)